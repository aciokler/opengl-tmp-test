#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 normalPosition_modelspace;
layout(location = 2) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 normal1;
out vec3 lightDir;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	vec4 lightDirV4 = MVP * vec4(vec3(0,0,0.5),1);
	lightDir = vec3(lightDirV4.x, lightDirV4.y, lightDirV4.z);

	// normal vector
	normal1 = normalPosition_modelspace;

	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}